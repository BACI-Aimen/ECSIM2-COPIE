const supabase = require('../config/supabase')
const ModelMur = require('../Model/ModelMur');


exports.getEntitemurRecherche = async () => {
    try {
      // Requ√™te pour r√©cup√©rer tous les utilisateurs avec le pseudo et l'id
      const { data, error } = await supabase
        .from('entit√©')
        .select('id_entit√©, libell√©_entit√©, id_mur') // On r√©cup√®re uniquement id et pseudo
  
      if (error) throw error;
  
      return data; // Retourne la liste des utilisateurs
    } catch (err) {
      console.error("Erreur lors de la r√©cup√©ration des utilisateurs :", err.message);
      throw new Error(err.message);
    }
  };
  exports.getAllentiteMere = async () => {
    try {
        const { data, error } = await supabase
            .from('entit√©')
            .select('id_entit√©, libell√©_entit√©')
            .is('id_entit√©_1', null);

        if (error) throw error;

        return data;
    } catch (err) {
        console.error("Erreur lors de la r√©cup√©ration des entit√©s filles :", err.message);
        throw new Error(err.message);
    }
};
exports.getAllentiteFilles = async () => {
  try {
      const { data, error } = await supabase
          .from('entit√©')
          .select('id_entit√©, libell√©_entit√©')
          .not('id_entit√©_1', 'is', null);

      if (error) throw error;

      return data;
  } catch (err) {
      console.error("Erreur lors de la r√©cup√©ration des entit√©s filles :", err.message);
      throw new Error(err.message);
  }
};
exports.getUneEntite = async (id_entit√©) => {
  try {
      const { data, error } = await supabase
          .from('entit√©')
          .select('id_entit√©, libell√©_entit√©,id_mur(photo_mur),id_entit√©_1(id_entit√©,libell√©_entit√©)')
          .eq('id_entit√©', id_entit√©);

      if (error) throw error;

      return data;
  } catch (err) {
      console.error("Erreur lors de la r√©cup√©ration des entit√©s filles :", err.message);
      throw new Error(err.message);
  }
};
exports.getAllEntites = async () => {
  try {
    const { data, error } = await supabase
      .from('entit√©') // Nom de la table
      .select('id_entit√©, libell√©_entit√©'); // R√©cup√®re uniquement l'ID et le libell√©

    if (error) throw error;

    return data;
  } catch (err) {
    throw new Error(`Erreur lors de la r√©cup√©ration des entit√©s : ${err.message}`);
  }
};

exports.getMursByIdEntite = async (id_entit√©) => {
  try {
    const { data, error } = await supabase
      .from('entit√©') // Nom de la table des murs
      .select('id_mur')
      .eq('id_entit√©', id_entit√©); // R√©cup√®re tous les murs li√©s √† l'entit√© donn√©e

    if (error) throw error;

    return data.map(mur => mur.id_mur); // Renvoie une liste des ID de murs
  } catch (err) {
    throw new Error(`Erreur lors de la r√©cup√©ration des murs : ${err.message}`);
  }
};
exports.deleteEntiteById = async (id_entit√©) => {
  try {

    // 1Ô∏è‚É£ V√©rifier si l'entit√© existe
    const existe = await exports.entiteExists(id_entit√©);
    console.log(existe)
    if (!existe) {
      return { error: "L'entit√© avec cet ID n'existe pas" };
    }

    // 1Ô∏è‚É£ R√©cup√©rer toutes les entit√©s filles
    const { data: entites_filles, error: errEntites } = await supabase
      .from('entit√©')
      .select('id_entit√©')
      .eq('id_entit√©_1', id_entit√©); // Supposons que id_parent stocke l'ID de l'entit√© m√®re

    if (errEntites) throw errEntites;

    const ids_entites_filles = entites_filles.map(e => e.id_entit√©);
    ids_entites_filles.push(id_entit√©); // Inclure aussi l'entit√© m√®re

    // 2Ô∏è‚É£ R√©cup√©rer et supprimer les murs associ√©s √† ces entit√©s
    let all_murs = [];
    for (const id of ids_entites_filles) {
      const murs = await exports.getMursByIdEntite(id);
      all_murs = all_murs.concat(murs);
    }

    // ‚úÖ R√©cup√©rer les photos des murs avant suppression
    const photos = await ModelMur.getPhotosByMurIds(all_murs);

    // ‚úÖ Supprimer les images du bucket
    for (const url of photos) {
      await ModelMur.SupprimerImageBucket(url); // üî• Appel de la m√©thode existante
    }

    await ModelMur.deleteMursByIds(all_murs);

    // 3Ô∏è‚É£ Supprimer les entit√©s (m√®re + filles)
    /*const { error } = await supabase
      .from('entite')
      .delete()
      .in('id_entit√©', ids_entites_filles);

    if (error) throw error;*/

    return { message: "Entit√© et murs associ√©s supprim√©s avec succ√®s" };
  } catch (err) {
    throw new Error(`Erreur lors de la suppression : ${err.message}`);
  }
};
exports.entiteExists = async (id_entit√©) => {
  try {
    const { data, error } = await supabase
      .from('entit√©')
      .select('id_entit√©')
      .eq('id_entit√©', id_entit√©)
      .maybeSingle(); // On r√©cup√®re une seule ligne
    if (error) throw error;

    return !!data; // Renvoie true si l'entit√© existe, sinon false
  } catch (err) {
    throw new Error(`Erreur lors de la v√©rification de l'entit√© : ${err.message}`);
  }
};
exports.getlibelleByIdEntite = async (id_entit√©) => {
  try {
    const { data, error } = await supabase
      .from('entit√©')
      .select('libell√©_entit√©')
      .eq('id_entit√©', id_entit√©); // R√©cup√®re le libell√© de l'entit√©

    if (error) throw error;

    return data
  } catch (err) {
    throw new Error(`Erreur lors de get libelle by ID entite: ${err.message}`);
  }
};
exports.createEntite = async (libelle, id_entite_fille, id_mur) => {
  try {
    const { data, error } = await supabase
      .from('entit√©')
      .insert([{ libell√©_entit√©: libelle, id_entit√©_1: id_entite_fille, id_mur }])
      .select()
      .single();

    if (error) throw error;

    return data;
  } catch (err) {
    throw new Error(`Erreur lors de la cr√©ation de l'entit√© : ${err.message}`);
  }
};


exports.updateEntite = async (id_entit√©, updates) => {
  try {
    const { data, error } = await supabase
      .from('entit√©')
      .update(updates)
      .eq('id_entit√©', id_entit√©)
      .select();

    if (error) throw error;

    if (!data || data.length === 0) {
      return { error: "Aucune entit√© trouv√©e avec cet ID" };
    }

    return data[0];
  } catch (err) {
    throw new Error(`Erreur lors de la modification de l'entit√© : ${err.message}`);
  }
};
exports.trouverParNom = async (nom_entit√©) => {
  try {
  const { data, error } = await supabase
    .from('entit√©')
    .select('id_entit√©') 
    .eq('libell√©_entit√©', nom_entit√©)
    .single();
  if (error) {
    console.error("Erreur r√©cup√©ration entit√© :", error.message);
    return null;
  }
  return data;
}
catch (err) {
  throw new Error(`Erreur du retrouver entit√© : ${err.message}`);
}
}

